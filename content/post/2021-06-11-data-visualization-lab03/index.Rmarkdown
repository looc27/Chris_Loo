---
title: Data Visualization Lab03
author: Christopher P. Loo
date: '2021-06-11'
slug: data-visualization-lab03
categories: []
tags: []
subtitle: ''
summary: ''
authors: []
lastmod: '2021-06-11T23:28:29-07:00'
featured: no
image:
  caption: ''
  focal_point: ''
  preview_only: no
projects: []
---


# Libraries

```{r}
library(tidyverse)
library(readr)
library(wordbankr)
library(here)
library(RColorBrewer)
library(wesanderson)
library(ggthemes)
library(ggsci)
library(beyonce)
library(viridis)
library(forcats)
library(colorspace)
library(colorblindr)
library(ggrepel)
library(ggplot2)
```

## And a few from Github...

```{r,eval=FALSE}
# Note that I have already taken care of installing these in this RStudio Cloud project, but if you want to use these libraries yourself, here's how you'd install them:
library(devtools)
devtools::install_github("wilkelab/cowplot")
devtools::install_github("clauswilke/colorblindr")
devtools::install_github("dill/beyonce")

```


# Reading the data

We'll be working with `data/animal_sounds_summary.csv`...

# Know your data! (Challenge #1)
```{r}
data <- read.csv('data/animal_sounds_summary.csv')
```

```{r}
#install.packages("skimr")
library(skimr)
skim(data)
```

## How many variables?
Six variables

### Which are continuous 
```{r}
glimpse(data)
```
I think only age is a continuous variable in this data set.
However, since proportions can be along continuous values from 0-100 then prop_produce and prop_understand
is also continuous variables. 

### Which are categorical and ordinal?
sound is a categorical variable.
kids_produce and kids_respond are more ordinal variables as they can be divided into range groups.

## How many _total_ kids?
```{r}
nrow(data)
```


## How many different ages?
```{r}
nrow(distinct(data))
```

### How many kids per age?
```{r}
data %>% count(age)
```

## How many types of animal sounds, and what are they?
```{r}
data %>% count(sound)
```

# Initial EDA Plots

## How many kids produce each kind of sound?
```{r}
ggplot(data, aes(x=sound, y=kids_produce)) + geom_col()
```
```{r}
# or a table, which is nice since I usually don't make tables.
data %>% 
  group_by(sound) %>%
  summarize(total_produce = sum(kids_produce)) %>%
  knitr::kable()
  
```

## Adding age

```{r}
ggplot(data, aes(x = age, y = prop_produce)) +
  geom_col() +
  labs(x = "Age", y = "Proportion of Children Producing")
```

### Bar chart
```{r}
ggplot(data, aes(x = age, y = prop_produce)) +
  geom_col() +
  labs(x = "Age", y = "Proportion of Children Producing") +
  facet_wrap(~sound)
```
### Scatter plot
```{r}
ggplot(data, aes(x = age, y = prop_produce)) +
  geom_point() +
  labs(x = "Age (in months)", y = "Proportion of Children Producing") +
  facet_wrap(~sound)
```

# Discrete colors


## Initial (uncolored) plot

_Remember: Make sure to adjust the labels!!_

```{r}
ggplot(data, aes(x = age, y = prop_produce)) +
  geom_point() +
  labs(x = "Age (months)", y = "Proportion of Children Producing") 
```


## Default discrete palette (Challenge #2)
```{r}
ggplot(data, aes(x = age, y = prop_produce)) +
  geom_point(aes(color = sound)) +
  labs(x = "Age (months)", y = "Proportion of Children Producing") 
```

## Adding lines (Challenge #3)
```{r}
ggplot(data, aes(x = age, y = prop_produce)) +
  geom_point(aes(color = sound), size = 2) +
  geom_line() +
  labs(x = "Age (months)", y = "Proportion of Children Producing")
```
**Interestingly, if I add my geom_line() after geom_point() it effects the layers of plot. The black line is layered over the colored data points.**


```{r}
ggplot(data, aes(x = age, y = prop_produce)) +
  geom_line(aes(group = sound)) +
  geom_point(aes(color = sound), size = 2) +
   labs(x = "Age (months)", y = "Proportion of Children Producing")
```

## Challenge #4


### Coloring both lines and points
```{r}
ggplot(data, aes(x = age, y = prop_produce, color = sound)) + 
  geom_line() +
  geom_point(size = 2) +
  labs(x = "Age (months)", y = "Proportion of Children Producing") 
```

### Using `geom_smooth()`
```{r}
ggplot(data, aes(x = age, y = prop_produce, color = sound)) + 
  geom_smooth(se = FALSE, lwd = .5) +
  #lwd is line weight, se = FALSE removes the standard error around the line
  geom_point(size = 2) +
  labs(x = "Age (months)", y = "Proportion of Children Producing") 
```
## Controlling factor order
```{r}
#install.packages("forcats")   #forcats package: for cat(egorical)
library(forcats)
```

```{r}
sounds <- data %>% 
  mutate(data = as.factor(sound))

sound_traj <- ggplot(sounds, aes(x = age, y = prop_produce,
                                color = fct_reorder2(sound, age, prop_produce))) +
  geom_smooth(se = FALSE, lwd = .5) +
  geom_point(size = 2) +
  labs(x = "Age (months)", y = "Proportion of Children Producing", color = "sound")
sound_traj
```

## Modifying default colors

Experiment with each property in `scale_color_hue()` to get a sense of what it does.
```{r}
sound_traj + 
  scale_color_hue()
```
```{r}
sound_traj +
  scale_color_hue(h = c(0, 90), l = 65, c = 100)

```
```{r}
sound_traj +
  scale_color_hue(l = 45)
```

```{r}
sound_traj +
  scale_color_hue(l = 75, c = 50)
```

## Setting discrete colors

Experiment with `scale_color_manual()` and some of the various [named colors](http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf) that come built-in to R!

```{r}
sound_traj +
  scale_color_manual(values = c("cornflowerblue", "seagreen", "coral"))
```


### Challenge #5

Why doesn't the code block change the colors?

sound_traj <- ggplot(sounds, aes(x = age, y = prop_produce,
                                color = fct_reorder2(sound, age, prop_produce))) +
  geom_smooth(se = FALSE, lwd = .5) +
  geom_point(size = 2) +
  labs(x = "Age (months)", y = "Proportion of Children Producing", color = "sound")
sound_traj

```{r}
ggplot(sounds, aes(x = age, 
                         y = prop_produce, 
                         color = fct_reorder2(sound, age, prop_produce))) + 
  geom_smooth(se = FALSE, lwd = .5) +
  geom_point(size = 2) +
  labs(x = "Age (months)", 
       y = "Proportion of Children Producing", 
       color = "sound") +
  scale_fill_manual(values = c("cornflowerblue", 
                               "seagreen", "coral"))
```
```{r}
ggplot(sounds, aes(x = age, 
                         y = prop_produce, 
                         fill = fct_reorder2(sound, age, prop_produce))) + 
  geom_smooth(se = FALSE, lwd = .5) +
  geom_point(size = 2) +
  labs(x = "Age (months)", 
       y = "Proportion of Children Producing", 
       fill = "sound") +
  scale_fill_manual(values = c("cornflowerblue", 
                               "seagreen", "coral"))
```
**Answers:**
In the first, we used scale_fill_manual, but the in the global aesthetics, we **mapped the color, not fill**, aesthetic onto the sound variable.
    In the second, we did define the fill aesthetic and used scale_fill_manual, so that is good. But **geom_line only understands the color aesthetic, not fill**. And for geom_point, the default shape for is 19, which does not understand the fill aesthetic.
    
### Challenge #6

```{r}
ggplot(sounds, aes(x = age, y = prop_produce, fill = fct_reorder2(sound, age, prop_produce))) +
  geom_smooth(aes(color = fct_reorder2(sound, age, prop_produce)), se = FALSE, lwd = .5,
              show.legend = FALSE) +
  geom_point(size = 2, shape = 21) +
  labs(x = "Age (months)", 
       y = "Proportion of Children Producing", 
       fill = "sound")
  
```
```{r}
ggplot(sounds, aes(x = age, y = prop_produce, fill = fct_reorder2(sound, age, prop_produce))) +
  geom_smooth(aes(color = fct_reorder2(sound, age, prop_produce)), se = FALSE, lwd = .5,
              show.legend = FALSE) +
  geom_point(size = 2, shape = 21) +
  labs(x = "Age (months)", 
       y = "Proportion of Children Producing", 
       fill = "sound") +
  scale_fill_manual(values = c("cornflowerblue", "seagreen", "coral")) +
  scale_color_manual(values = c("cornflowerblue", "seagreen", "coral"))
```
```{r}
my_colors <- c("cadetblue", "steelblue", "salmon") 

sound_traj +
  scale_color_manual(values = my_colors)
```


### Challenge #7

```{r}
sb_colorblind <- c("#000000", "#009E73", "#911eb4",
                        "#CC79A7", "#F0E442", "#56B4E9")
sound_traj +
  scale_colour_manual(values = sb_colorblind)
```

## Built-in descrete color palettes

### Using `scale_color_brewer()`
```{r}
#install.packages("RColorBrewer")
library(RColorBrewer)
```

```{r}
brewer.pal(5, "Dark2")
```
```{r}
sound_traj +
  scale_color_brewer(palette = "Dark2")
```

### Using `wesanderson`
```{r}
#install.packages("wesanderson")
library(wesanderson)
```

```{r}
names(wes_palettes)
```
```{r}
wes_palette("Zissou1")
```
```{r}
sound_traj +
  scale_color_manual(values = wes_palette("Darjeeling1"))
```
```{r}
sound_traj +
  scale_color_manual(values = wes_palette("BottleRocket2"))
```


#### Challenge #8
```{r}
sound_traj +
  scale_color_manual(values = wes_palette("Rushmore")[3:5])
```
```{r}
sound_traj +
  scale_color_manual(values = wes_palette("Zissou1")[c(2, 3, 5)])
```

### Using `ggthemes`
```{r}
#install.packages("ggthemes")
library(ggthemes)
```

```{r}
sound_traj +
  scale_color_fivethirtyeight()
```
```{r}
sound_traj +
  scale_color_economist()
```
```{r}
library(ggsci)

sound_traj + scale_color_nejm()
```

### Using `beyonce`
```{r}
#install.packages("devtools")
#devtools::install_github("dill/beyonce")
library(beyonce)
```

```{r}
beyonce_palette(18)
```
```{r}
sound_traj +
  scale_color_manual(values = beyonce_palette(18)[3:5])
```

### Using `viridis`
```{r}
#install.packages("viridis")
library(viridis)
```

The default argument for discrete is FALSE, so to use the discrete palettes you need to set discrete = TRUE. 

```{r}
sound_traj +
  scale_color_viridis(discrete = TRUE) +
  theme_minimal()
```
```{r}
sound_traj +
  scale_color_viridis(discrete = TRUE, option = "plasma") +
  theme_minimal()
```

#### Challenge #9

## Greyscale

Experimenting with `scale_color_grey()`/`scale_fill_grey()`
```{r}
ggplot(sounds, aes(x = age, y = prop_produce, fill = fct_reorder2(sound, age, prop_produce))) +
  geom_smooth(aes(color = fct_reorder2(sound, age, prop_produce)), 
              se = FALSE, lwd = .5, show.legend = FALSE) +
  geom_point(size = 2, shape = 21, colour = "midnightblue") +
  labs(x = "Age (months)", 
       y = "Proportion of Children Producing", 
       fill = "sound") +
  scale_fill_viridis(discrete = TRUE) +
  scale_color_viridis(discrete = TRUE) +
  theme_minimal()
```

```{r}
sound_traj +
  scale_color_grey() +
  theme_minimal()
```
```{r}
sound_traj +
  scale_color_grey(start = 0.2, end = .8)
```

```{r}
ggplot(sounds, aes(x = age, 
                   y = prop_produce, 
                   fill = fct_reorder2(sound, age, prop_produce))) + 
  geom_smooth(aes(color = fct_reorder2(sound, age, prop_produce)),
              se = FALSE, lwd = .5, show.legend = FALSE) +
  geom_point(size = 2, shape = 21) +
  labs(x = "Age (months)", 
       y = "Proportion of Children Producing", 
       fill = "sound") +
  scale_fill_grey(start = 0.3, end = 1) +
  scale_color_grey(start = 0.3, end = 1) 
```

```{r}
ggplot(sounds, aes(x = age, 
                   y = prop_produce, 
                   fill = fct_reorder2(sound, age, prop_produce))) + 
  geom_smooth(aes(lty = fct_reorder2(sound, age, prop_produce)), color = "black",
              se = FALSE, lwd = .5, show.legend = FALSE) +
  geom_point(size = 2, shape = 21) +
  labs(x = "Age (months)", 
       y = "Proportion of Children Producing", 
       fill = "sound") +
  scale_fill_grey(start = 0.3, end = 1) 
```
```{r}
ggplot(sounds, aes(x = age, 
                   y = prop_produce, 
                   fill = fct_reorder2(sound, age, prop_produce))) + 
  geom_smooth(aes(color = fct_reorder2(sound, age, prop_produce),
                  lty = fct_reorder2(sound, age, prop_produce)),
              se = FALSE, lwd = .5, show.legend = FALSE) +
  geom_point(size = 2, shape = 21) +
  labs(x = "Age (months)", 
       y = "Proportion of Children Producing", 
       fill = "sound") +
  scale_fill_grey(start = 0.3, end = .8) +
  scale_color_grey(start = 0.3, end = .8) 
```

## Using `colorblindr`
```{r}
#devtools::install_github("wilkelab/cowplot)
#install:packages("colorspace", repos = "http://R-Forge.R-project.org")
#devtools::install_github("clauswilke/colorblindr")
```

```{r}
my_sound_traj <- sound_traj +
  scale_color_manual(values = beyonce_palette(18)[c(1, 4, 5)])
```

```{r}
library(colorblindr)
cvd_grid(my_sound_traj)
```

```{r}
cb_sound_traj <- sound_traj +
  scale_color_OkabeIto()
cb_sound_traj
```
```{r}
cvd_grid(cb_sound_traj)
```
```{r}
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")

# To use for line and point colors, add
sound_traj +
  scale_colour_manual(values = cbbPalette[c(3, 7, 8)])
```

## Repel labels
```{r}
library(ggrepel)

sounds <- sounds %>%
  mutate(label = case_when(
    age == max(age) ~ sound))

ggplot(sounds, aes(x = age, 
                   y = prop_produce, 
                   color = fct_reorder2(sound, age, prop_produce))) +
  geom_smooth(se = FALSE, lwd = .5) +
  geom_point(size = 2) +
  labs(x = "Age (months)", 
       y = "Proportion of Children Producing") +
  geom_text_repel(aes(label = label),
                  nudge_x = 1,
                  direction = "y",
                  na.rm = TRUE) +
  guides(color = FALSE)
```

# Continuous COlors

Experiment a bit with `scale_color_gradient()`/`scale_fill_gradient()`!

## Built-in continuous palettes

Experiment a bit with `RColorBrewer` and `viridis`
```{r}
sound_by_age <- ggplot(sounds, aes(x = age, 
                                   y = prop_produce, 
                                   color = age)) +
  geom_line(aes(group = sound), lwd = .5) +
  geom_point(size = 2) +
  labs(x = "Age (months)", 
       y = "Proportion of Children Producing")
sound_by_age
```
```{r}
sound_by_age +
  scale_color_gradient(trans = "reverse")
```
```{r}
sound_by_age +
  scale_color_gradient(low = "white", high = "red")
```
```{r}
sound_by_age +
  scale_color_gradient(low = "grey90", high = "black")

```
```{r}
med_age <- sounds %>% 
  summarize(mos = median(age)) %>% 
  pull()
sound_by_age +
  scale_color_gradient2(midpoint = med_age,
                      low="blue", mid="white", high="red" )
```


# Challenge #10
```{r}
#install.packages("gapminder")
library(gapminder)
```

```{r}
#load data
gap <- gapminder
glimpse(gap)
```
```{r}
skim(gap)
```

```{r}
sum(is.na(gap))
```

```{r}
summary(gap)
```
```{r}
unique(gap %>% select(year, country, continent))
```

## Version with _good_ color

Also, good with default colors

```{r}
brewer.pal(5, "Dark2") # list 5 hex colors

my_plot <- ggplot(gap, aes(x = log(gdpPercap), y = lifeExp, color = (continent))) + 
  geom_point(alpha = .2, size = 1) +
  labs(x = "GDP Per Capita (log)", y = "Life Expectancy") +
  facet_wrap(~continent)
my_plot + scale_color_brewer(palette = "Dark2")
```


## Version with greyscale

```{r}
my_plot + scale_color_grey(start = 0.2, end = .8) 
```

## Version with _dreadful_ color
```{r}
my_plot +
  scale_color_manual(values = wes_palette("Zissou1"))
```